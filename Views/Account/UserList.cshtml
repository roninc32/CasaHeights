@model IEnumerable<UserListViewModel>
@{
    ViewData["Title"] = "User Management";
    var currentFilter = Context.Request.Query["role"].ToString();
    
    // Pre-calculate URLs for the dropdown
    var allUsersUrl = Url.Action("UserList");
    var adminUrl = Url.Action("UserList", new { role = "Admin" });
    var staffUrl = Url.Action("UserList", new { role = "Staff" });
    var userUrl = Url.Action("UserList", new { role = "User" });
}

<div class="container py-4">
    <!-- Header -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2 class="h3 mb-0">
            <i class="fas fa-users text-primary"></i> User Management
            @if (!string.IsNullOrEmpty(currentFilter))
            {
                <span class="badge bg-light text-dark border ms-2">
                    @currentFilter
                    <a href="@Url.Action("UserList")" class="text-dark ms-1">
                        <i class="fas fa-times"></i>
                    </a>
                </span>
            }
        </h2>
        <a asp-action="CreateUser" class="btn btn-primary">
            <i class="fas fa-user-plus"></i> Create New User
        </a>
    </div>

    <!-- Role Filter Buttons -->
    <div class="card shadow-sm mb-4">
        <div class="card-body">
            <div class="d-flex flex-wrap gap-2">
                <a href="@Url.Action("UserList")" 
                   class="btn @(string.IsNullOrEmpty(currentFilter) ? "btn-primary" : "btn-outline-secondary")">
                    <i class="fas fa-list me-1"></i> All Users
                </a>
                <a href="@Url.Action("UserList", new { role = "Admin" })" 
                   class="btn @(currentFilter == "Admin" ? "btn-danger" : "btn-outline-danger")">
                    <i class="fas fa-shield-alt me-1"></i> Admins
                    <span class="badge bg-light text-dark ms-1">@Model.Count(u => u.Role == "Admin")</span>
                </a>
                <a href="@Url.Action("UserList", new { role = "Staff" })" 
                   class="btn @(currentFilter == "Staff" ? "btn-info" : "btn-outline-info")">
                    <i class="fas fa-briefcase me-1"></i> Staff
                    <span class="badge bg-light text-dark ms-1">@Model.Count(u => u.Role == "Staff")</span>
                </a>
                <a href="@Url.Action("UserList", new { role = "User" })" 
                   class="btn @(currentFilter == "User" ? "btn-success" : "btn-outline-success")">
                    <i class="fas fa-user me-1"></i> Users
                    <span class="badge bg-light text-dark ms-1">@Model.Count(u => u.Role == "User")</span>
                </a>
            </div>
        </div>
    </div>

    <!-- User List Table -->
    <div class="card shadow-sm">
        <div class="card-body p-0">
            <div class="table-responsive">
                <table class="table table-hover mb-0">
                    <thead class="bg-light">
                        <tr>
                            <th class="px-4">User</th>
                            <th>Contact Info</th>
                            <th>House No.</th>
                            <th>Role</th>
                            <th>Created</th>
                            <th class="text-end px-4">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Model != null && Model.Any())
                        {
                            @foreach (var user in Model)
                            {
                                <tr>
                                    <td class="px-4">
                                        <div class="d-flex align-items-center">
                                            @if (!string.IsNullOrEmpty(user.ProfilePicture))
                                            {
                                                <img src="@user.ProfilePicture" class="avatar-circle me-2" alt="@user.Name" />
                                            }
                                            else
                                            {
                                                <div class="avatar-circle bg-@GetRoleColor(user.Role) text-white me-2 d-flex align-items-center justify-content-center">
                                                    @(string.IsNullOrEmpty(user.Name) ? "?" : user.Name.Substring(0, 1).ToUpper())
                                                </div>
                                            }
                                            <div>
                                                <div class="fw-medium">@user.Name</div>
                                                <small class="text-muted">@user.Email</small>
                                            </div>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="d-flex align-items-center">
                                            <i class="fas fa-phone text-muted me-2"></i>
                                            <span>@(string.IsNullOrEmpty(user.PhoneNumber) ? "Not provided" : user.PhoneNumber)</span>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="d-flex align-items-center">
                                            <i class="fas fa-home text-muted me-2"></i>
                                            <span>@(string.IsNullOrEmpty(user.HouseNumber) ? "Not assigned" : user.HouseNumber)</span>
                                        </div>
                                    </td>
                                    <td>
                                        <span class="badge bg-@GetRoleColor(user.Role) rounded-pill px-3 py-2">
                                            @user.Role
                                        </span>
                                    </td>
                                    <td>
                                        <div class="d-flex align-items-center">
                                            <i class="fas fa-calendar text-muted me-2"></i>
                                            <small>@user.DateCreated.ToString("MMM dd, yyyy")</small>
                                        </div>
                                    </td>
                                    <td class="text-end px-4">
                                        <div class="btn-group">
                                            <a asp-action="EditUser" asp-route-id="@user.Id"
                                               class="btn btn-sm btn-outline-primary">
                                                <i class="fas fa-edit"></i>
                                            </a>
                                            <form asp-action="DeleteUser" asp-route-id="@user.Id"
                                                  method="post" class="d-inline ms-1"
                                                  onsubmit="return confirm('Are you sure you want to delete this user?');">
                                                @Html.AntiForgeryToken()
                                                <button type="submit" class="btn btn-sm btn-outline-danger">
                                                    <i class="fas fa-trash"></i>
                                                </button>
                                            </form>
                                        </div>
                                    </td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="6" class="text-center py-5">
                                    <div class="py-4">
                                        <i class="fas fa-search fa-3x text-muted mb-3"></i>
                                        <h5>No users found</h5>
                                        <p class="text-muted">
                                            @if (!string.IsNullOrEmpty(currentFilter))
                                            {
                                                <span>No users with role "@currentFilter" were found.</span>
                                            }
                                            else
                                            {
                                                <span>No users have been created yet.</span>
                                            }
                                        </p>
                                        @if (!string.IsNullOrEmpty(currentFilter))
                                        {
                                            <a href="@Url.Action("UserList")" class="btn btn-outline-primary mt-2">
                                                View All Users
                                            </a>
                                        }
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
        @if (Model != null && Model.Any())
        {
            <div class="card-footer bg-white d-flex justify-content-between align-items-center">
                <small class="text-muted">
                    Showing @Model.Count() users
                    @if (!string.IsNullOrEmpty(currentFilter))
                    {
                        <span>with role "@currentFilter"</span>
                    }
                </small>
                <div>
                    <select id="roleFilter" class="form-select form-select-sm" style="width: auto; display: inline-block;">
                        <option value="@allUsersUrl">All Users</option>
                        <option value="@adminUrl">Admins</option>
                        <option value="@staffUrl">Staff</option>
                        <option value="@userUrl">Users</option>
                    </select>
                </div>
            </div>
        }
    </div>
</div>

@functions {
    string GetRoleColor(string role)
    {
        return role switch
        {
            "Admin" => "danger",
            "Staff" => "info",
            "User" => "success",
            _ => "secondary"
        };
    }
}

<style>
    .avatar-circle {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: 600;
        font-size: 16px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    
    .gap-2 {
        gap: 0.5rem;
    }
    
    .fw-medium {
        font-weight: 500;
    }
    
    .badge.rounded-pill {
        padding: 0.35em 0.65em;
        font-weight: 500;
    }
    
    .table-hover tbody tr:hover {
        background-color: rgba(0, 0, 0, 0.02);
    }
    
    .btn-outline-primary, .btn-outline-danger {
        border-width: 1.5px;
    }
</style>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    
    <script>
        // Enable tooltip functionality if you're using Bootstrap 5
        var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
        var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
            return new bootstrap.Tooltip(tooltipTriggerEl)
        });
        
        // Set up the dropdown to redirect when changed
        document.addEventListener('DOMContentLoaded', function() {
            // Set initial selected option based on current filter
            var roleFilter = document.getElementById('roleFilter');
            if (roleFilter) {
                var currentFilter = '@currentFilter';
                var options = roleFilter.options;
                
                for (var i = 0; i < options.length; i++) {
                    var optionUrl = options[i].value;
                    if (currentFilter === '') {
                        // All Users option
                        if (optionUrl.indexOf('role=') === -1) {
                            options[i].selected = true;
                            break;
                        }
                    } else {
                        // Role-specific option
                        if (optionUrl.indexOf('role=' + currentFilter) > -1) {
                            options[i].selected = true;
                            break;
                        }
                    }
                }
                
                // Add change handler
                roleFilter.addEventListener('change', function() {
                    window.location.href = this.value;
                });
            }
        });
    </script>
}